
@using CreditReportApp2.Data
@inject IJSRuntime JsRuntime
@typeparam T

<tr class="@GetHighlightClass()">
    <MudTd DataLabel="Customer ID" Style="text-align:center; width: 15%;">@Report.CustomerID</MudTd>
    <MudTd DataLabel="First Name" Style="text-align:center; width: 20%;">@Report.FirstName</MudTd>
    <MudTd DataLabel="Last Name" Style="text-align:center; width: 20%;">@Report.LastName</MudTd>
    <MudTd DataLabel="Credit Report Name" Style="text-align:center; width: 20%;">@Report.ReportName</MudTd>
    <MudTd DataLabel="Credit Score" Style="text-align:center; width: 10%;">@Report.CreditScore</MudTd>
    <MudTd DataLabel="View Details" Style="text-align:center; width: 15%;" id="viewDetails">
        <MudButton OnClick="() => OnDetailsClicked.InvokeAsync(Report)">View Details</MudButton>
    </MudTd>
</tr>

@code {
    [Parameter] public CreditReport Report { get; set; }
    [Parameter] public EventCallback<CreditReport> OnDetailsClicked { get; set; }

    private bool isHighlighted = false;
    private bool shouldCheckLocalStorage = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && shouldCheckLocalStorage)
        {
            var selectedScoresJson = await JsRuntime.InvokeAsync<string>("localStorage.getItem", $"creditReport_{Report.CustomerID}");

            isHighlighted = !string.IsNullOrEmpty(selectedScoresJson);

            StateHasChanged();
            shouldCheckLocalStorage = false;
        }
    }

    private string GetHighlightClass()
    {
        return isHighlighted ? "highlight" : "";
    }
}
