@page "/credit-reports"
@inject CreditReportService CreditReportService
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime
@using CreditReportApp2.Data
@using MudBlazor

<h2>Credit Reports</h2>
<div class="center-container">
<MudContainer>
    <MudGrid>
        <MudItem>
            <MudTable Items="@creditReports" Hover="true" Class="mud-table">
                <HeaderContent>
                    <MudTr>
                        <MudTh Style="text-align:center; width: 15%;" class="bg-primary text-white">Customer ID</MudTh>
                        <MudTh Style="text-align:center; width: 20%;" class="bg-primary text-white">First Name</MudTh>
                        <MudTh Style="text-align:center; width: 20%;" class="bg-primary text-white">Last Name</MudTh>
                        <MudTh Style="text-align:center; width: 20%;" class="bg-primary text-white">Credit Report Name</MudTh>
                        <MudTh Style="text-align:center; width: 10%;" class="bg-primary text-white">Credit Score</MudTh>
                        <MudTh Style="text-align:center; width: 15%;" class="bg-primary text-white">View Details</MudTh>
                    </MudTr>
                </HeaderContent>

                <RowTemplate>
                    <CreditReportRow T="CreditReport" Report="context" OnDetailsClicked="NavigateToDetails" />
                </RowTemplate>
            </MudTable>
            <br />
            <br />
            <MudButton style="background-color: mediumvioletred; color: white" OnClick="ClearSelection">Clear All Selected</MudButton>
        </MudItem>
    </MudGrid>
</MudContainer>
</div>
@code {
    private List<CreditReport> creditReports;
    private bool clearSelectionFlag = false;

    protected override async Task OnInitializedAsync()
    {
        creditReports = await CreditReportService.GetCreditReportsAsync();
    }

    private async Task NavigateToDetails(CreditReport report)
    {
        // Check if there's a CreditReport object stored in localStorage for this CustomerID
        var existingReportJson = await JsRuntime.InvokeAsync<string>("localStorage.getItem", $"creditReport_{report.CustomerID}");

        if (!string.IsNullOrEmpty(existingReportJson))
        {
            // Deserialize the CreditReport object
            var existingReport = Newtonsoft.Json.JsonConvert.DeserializeObject<CreditReport>(existingReportJson);

        }

        await JsRuntime.InvokeVoidAsync("localStorage.setItem", $"creditReport_{report.CustomerID}", Newtonsoft.Json.JsonConvert.SerializeObject(report));

        // Navigate to the details page
        Navigation.NavigateTo($"/credit-report-details/{report.CustomerID}");
    }

    private async Task ClearSelection()
    {
        foreach (var report in creditReports)
        {
            await JsRuntime.InvokeVoidAsync("localStorage.removeItem", $"creditReport_{report.CustomerID}");
        }

        await JsRuntime.InvokeVoidAsync("localStorage.removeItem", "selectedCreditScores");

        await JsRuntime.InvokeVoidAsync("location.reload");
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && clearSelectionFlag)
        {
            await JsRuntime.InvokeVoidAsync("localStorage.removeItem", "selectedCreditScores");
            clearSelectionFlag = false;
        }
    }
}

