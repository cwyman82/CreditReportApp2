@* @inherits LayoutComponentBase

<MudLayout>
    <MudAppBar Color="Color.Primary" Elevation="1">
        <MudToolbar>
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" @onclick="ToggleNavMenu" />
            <MudText Typo="Typo.h6" Class="ml-2">Credit Report Viewer</MudText>
        </MudToolbar>
    </MudAppBar>

    <MudDrawer @bind-Open="_drawerOpen" Color="Color.Default" Elevation="0" Width="250px">
        <MudDrawerHeader>Menu</MudDrawerHeader>
        <MudNavMenu />
    </MudDrawer>

    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

@code {
    private bool _drawerOpen = false;

    private void ToggleNavMenu()
    {
        _drawerOpen = !_drawerOpen;
    }
} *@
@inherits LayoutComponentBase
@inject IJSRuntime JsRuntime
@using MudBlazor
@using CreditReportApp2.Shared

<MudThemeProvider Theme="@currentTheme" />
<MudAppBar Color="Color.Primary" Elevation="4">
    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Secondary" OnClick="ToggleDrawer" />
    <MudText Typo="Typo.h6">Credit Report App</MudText>
    <MudSpacer />
    <MudSwitch T="bool" @bind-Checked="isDarkMode" Color="Color.Primary" Label="Dark Mode" OnChange="ToggleDarkMode" />
</MudAppBar>

<MudDrawer @bind-Open="isDrawerOpen">
    <MudDrawerContent>
        <!-- Navigation items can go here -->
        <NavMenu />
    </MudDrawerContent>
</MudDrawer>

<MudMainContent>
    @Body
</MudMainContent>

@code {
    private bool isDarkMode = false;
    private MudTheme currentTheme;
    private bool isDrawerOpen = false;    // State for MudDrawer open/close

    private readonly MudTheme lightTheme = new MudTheme()
    {
        PaletteLight = new PaletteLight()
        {
            Primary = Colors.Blue.Default,
            Secondary = Colors.Green.Accent4,
        }
    };

    private readonly MudTheme darkTheme = new MudTheme()
    {
        PaletteDark = new PaletteDark()
        {
                Primary = "#424242", 
                Secondary = "#607D8B", 
                Background = "#121212", 
                Surface = "#1E1E1E",    
                TextPrimary = Colors.Shades.White,
                AppbarBackground = "#212121", 
        }
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Check localStorage to get the saved theme preference
            var savedTheme = await JsRuntime.InvokeAsync<string>("localStorage.getItem", "themePreference");
            isDarkMode = savedTheme == "dark";
            SetTheme();

            // Force re-render to apply the theme
            StateHasChanged();
        }
    }

    private void SetTheme()
    {
        currentTheme = isDarkMode ? darkTheme : lightTheme;
    }

    private async Task ToggleDarkMode()
    {
        // Toggle between light and dark mode
        isDarkMode = !isDarkMode;
        SetTheme();

        // Save the user's preference in localStorage
        await JsRuntime.InvokeVoidAsync("localStorage.setItem", "themePreference", isDarkMode ? "dark" : "light");
    }

    private void ToggleDrawer()
    {
        isDrawerOpen = !isDrawerOpen; // Toggle drawer open state
    }
}


